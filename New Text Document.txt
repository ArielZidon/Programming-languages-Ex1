#lang pl

#|-------- part 1 --------|#

;;********Q1*********;;

#| We will connect all the lists
to one list by recursively going over
each list, and adding it to the rest of the list,
that has the rest of the internal lists |#

(: open-list : (Listof (Listof Number)) -> (Listof Number))
(define (open-list lt)
        (cond [(null? lt) null]
              [else (append (first lt) (open-list (rest lt)))]
              ))

(test (open-list '((1 2 3) (2 3 3 4) (9 2 -1) (233 11 90)))
      => '(1 2 3 2 3 3 4 9 2 -1 233 11 90))

(test (open-list '((233 11 90)))
      => '(233 11 90))

(test (open-list '((2 4) (4 2)))
      => '(2 4 4 2))

(test (open-list '((0) (1)))
      => '(0 1))

(test (open-list '())
      => '())

(test (open-list '(() (1)))
      => '(1))

(test (open-list '((2) ()))
      => '(2))

(test (open-list '(() () ()))
      => '())


;;********Q2*********;;

#|A function that goes through the list and
gives us the minimum number in the list|#

(: mini : (Listof Number) ->  Number)
(define (mini lt)
      (cond [(null? lt) +inf.0]
            [else (min(first lt) (mini (rest lt)))]
             ))

#|A function that goes through the list and
gives us the maximum number in the list|#

(: maxi : (Listof Number) ->  Number)
(define (maxi lt)
      (cond [(null? lt) -inf.0]
            [else (max(first lt) (maxi (rest lt)))]
             )) 

#| We will use the function of section A
in order to connect the sub-lists into one
list and send to helper functions that will go
through the list and give us a maximum and minimum member. |#

(: min&max : (Listof (Listof Number)) -> (Listof Number))
 (define (min&max lt)
   (cond [(null? (open-list lt)) '(-inf.0 +inf.0)]
          [else (list (mini (open-list lt)) (maxi (open-list lt)))] 
          ))
   

(test (min&max '((1 2 3) (2 3 3 4) (9 2 -1) (233 11 90)))
      => '(-1.0 233.0))

(test (min&max '(() () (2 3 3 4) (9 2 -1) (233 11 90)))
      => '(-1.0 233.0))

(test (min&max '((+inf.0) (-inf.0) (2 3 3 4) (9 2 -1) (233 11 90)))
      => '(-inf.0 +inf.0))

(test (min&max '((-1 -2 -3) (-2 -3 -3 -4)))
      => '(-4.0 -1.0))

(test (min&max '(()))
      => '(-inf.0 +inf.0))

(test (min&max '((+inf.0)))
      => '(+inf.0 +inf.0))

(test (min&max '((-inf.0)))
      => '(-inf.0 -inf.0))


;;********Q3*********;;

#|In a different way from section B,
we will connect the sub-lists to one list with
the help of the function from section A and activate
the existing functions 'min' and 'max'|#

(: min&max_apply : (Listof (Listof Number)) -> (Listof Number))
(define (min&max_apply lt)
  (cond [(null? (open-list lt)) '(-inf.0 +inf.0)]
  [else (list (apply min (open-list lt)) (apply max (open-list lt)))]
  )
  )

(test (min&max_apply '((1 2 3) (2 3 3 4) (9 2 -1) (233 11 90)))
      => '(-1 233))

(test (min&max_apply '((0) (1) (3) (4)))
      => '(0 4))

(test (min&max_apply '((0 1) (0 1) (-1 5) (0 1)))
      => '(-1 5))

(test (min&max_apply '((-3 6) (-10 3)))
      => '(-10 6))

(test (min&max_apply '((-inf.0) (+inf.0) (0) (1) (3) (4)))
      => '(-inf.0 +inf.0))

(test (min&max_apply '((0)))
      => '(0 0))

(test (min&max_apply '(()))
      => '(-inf.0 +inf.0))

(test (min&max_apply '((+inf.0)))
      => '(+inf.0 +inf.0))

(test (min&max_apply '((-inf.0)))
      => '(-inf.0 -inf.0))

#|-------- part 2 --------|#

;;********Q1*********;;

#|Implement the empty table "EmptyTbl" - this
is basically it×”Data type (constructor).|#

(define-type Table
  [EmptyTbl]
  
;;********Q2*********;;
  
#|The Add operation is also a constructor version.
Accepts a symbol (key), a string
(value), and table and returns an extended table.|#

  [Add Symbol String Table])

(test (EmptyTbl)
      => (EmptyTbl))

(test (Add 'a "aa" (EmptyTbl))
      => (Add 'a "aa" (EmptyTbl)))

(test (Add 'b "B" (Add 'a "A" (EmptyTbl)))
      => (Add 'b "B" (Add 'a "A" (EmptyTbl))))

(test (Add 'c "B" (Add 'b "A" (EmptyTbl)))
      => (Add 'c "B" (Add 'b "A" (EmptyTbl))))

(test (Add 'a "aa" (Add 'b "B" (Add 'a "A" (EmptyTbl))))
      => (Add 'a "aa" (Add 'b "B" (Add 'a "A" (EmptyTbl)))))

(test (Add 'a "aa" (Add 'b "bb" (Add 'c "cc" (Add 'd "dd" (Add 'e "ee" (Add 'f "ff" (Add 'g "gg" (Add 'h "hh" (EmptyTbl)))))))))
      => (Add 'a "aa" (Add 'b "bb" (Add 'c "cc" (Add 'd "dd" (Add 'e "ee" (Add 'f "ff" (Add 'g "gg" (Add 'h "hh" (EmptyTbl))))))))))

;;********Q3*********;;

#|Implementing a search-table is very similar to searching a linked list,
checking on each Table whether it is of type EmptyTbl or Add and if it is an Add,
checking whether the key is similar to a Symbol, if so a string of the same Add is returned,
if not you will recurse to the search-table with the table of the Add.
If we reached EmptyTbl, it means that the key does not exist and it will return false (f).|#

(: search-table : Symbol Table -> (U String #f))
(define (search-table k table)
         (cases table
           [(EmptyTbl) #f]
           [(Add smbl str tb) (if(eq? k smbl) str (search-table k tb))] 
         ))

(test (search-table 'c (Add 'a "AAA" (Add 'b "B" (Add 'a "A" 
(EmptyTbl)))))
      => #f)      

(test (search-table 'a (Add 'a "AAA" (Add 'b "B" (Add 'a "A" 
(EmptyTbl)))))
      => "AAA")

(test (search-table 'a (Add 'a "AAA" (Add 'b "B" (Add 'a "A" 
(EmptyTbl)))))
      => "AAA")

(test (search-table 's (Add 'a "AAA" (Add 'b "B" (Add 'a "A" 
(EmptyTbl)))))
      => #f)

(test (search-table 'g  
(EmptyTbl))
      => #f)

;;********Q4*********;;

#|Deletion of a table of type Add,
If the symbol you are looking for is the same as the key,
we will return the Add table and actually "bypass" the Add where the symbol we wanted to delete is found.
If we did not find it, we will return the original table.|#

(: remove-item : Table Symbol -> Table)
(define (remove-item table k)
   (cases table
           [(EmptyTbl) (EmptyTbl)]
           [(Add smbl str tb)
            (cond[(eq? smbl k) tb]
                [else(Add smbl str (remove-item tb k))])]
     ))

(test (remove-item (EmptyTbl) 'b)
      => (EmptyTbl))

(test (remove-item (Add 'a "AAA" (Add 'b "B" (Add 'a "A" (EmptyTbl)))) 'a)
      => (Add 'b "B" (Add 'a "A" (EmptyTbl))))

(test (remove-item (Add 'a "AAA" (Add 'b "B" (Add 'a "A" (EmptyTbl)))) 'b)
      => (Add 'a "AAA" (Add 'a "A" (EmptyTbl))))

(test (remove-item (Add 'a "AAA" (Add 'd "B" (Add 'a "A" (EmptyTbl)))) 'b)
      => (Add 'a "AAA" (Add 'd "B" (Add 'a "A" (EmptyTbl)))))

(test (remove-item (Add 'a "A" (EmptyTbl)) 'a)
      => (EmptyTbl))
